//
// Copyright © 2025 Roland Lariotte. Under the MIT License.
//

import Foundation

/// Retrieves input and output paths from the `IconsProcessor` plugin arguments.
let arguments = ProcessInfo().arguments
if arguments.count < 3 {
  print("Missing arguments `input` and `output` from `IconsProcessor` plugin.")
  exit(1)
}

let (input, output) = (arguments[1], arguments[2])

/// Represents the contents of an asset catalog entry.
struct ContentsData: Decodable {
  let images: [Image]

  /// Defines an image entry inside the asset catalog.
  struct Image: Decodable {
    let filename: String?
  }
}

/// Holds the generated Swift code for icons.
var generatedCode = """
//
// Copyright © 2025 Roland Lariotte. Under the MIT License.
//

// File auto-generated by the `IconsProcessor` plugin within the CanvasKit package.

import SwiftUI

/// Enum representing all available icons in `Icons.xcassets`.
enum CKIconAsset: String, CaseIterable {


"""

var enumCases: [String] = []

/// Scans `Icons.xcassets` for `.imageset` directories and generates `Image` constants.
try FileManager
  .default
  .subpathsOfDirectory(atPath: input)
  .forEach { item in
    guard item.hasSuffix("imageset") else { return }

    let contentsURL = URL(fileURLWithPath: input)
      .appendingPathComponent(item)
      .appendingPathComponent("Contents.json")

    let data = try Data(contentsOf: contentsURL)
    let contents = try JSONDecoder().decode(ContentsData.self, from: data)

    let hasIcon = contents.images.filter { $0.filename != .none }.isEmpty == false
    guard hasIcon else { return }

    let baseName = contentsURL
      .deletingLastPathComponent()
      .deletingPathExtension()
      .lastPathComponent

    /// Preserve original casing from asset name.
    let formattedBaseName = baseName
      .split(separator: " ")
      .map { $0.prefix(1).uppercased() + $0.dropFirst() }
      .joined()

    /// Add the enum case with `rawValue`.
    enumCases.append("  case \(formattedBaseName.prefix(1).lowercased())\(formattedBaseName.dropFirst())")
  }

/// Append the enum cases and `var image: Image` property.
generatedCode.append(enumCases.joined(separator: "\n"))
generatedCode.append("""


  var image: Image { Image(rawValue, bundle: .module) }
}
""")

/// Writes the generated Swift code to the output file.
try generatedCode.write(to: URL(fileURLWithPath: output), atomically: true, encoding: .utf8)
