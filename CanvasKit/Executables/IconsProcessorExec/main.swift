//
// Copyright © 2025 Roland Lariotte. Under the MIT License.
//

import Foundation

/// Retrieves input and output paths from the `IconsProcessor` plugin arguments.
let arguments = ProcessInfo().arguments
if arguments.count < 3 {
  print("Missing arguments `input` and `output` from `IconsProcessor` plugin.")
  exit(1)
}
let (input, output) = (arguments[1], arguments[2])

/// Represents the data contents of an asset catalog json file.
struct ContentsData: Decodable {
  let images: [Image]

  struct Image: Decodable {
    let filename: String?
  }
}

/// Holds the generated Swift code for icons in the generated `CKIcons` file.
var generatedCode = """
//
// Copyright © 2025 Roland Lariotte. Under the MIT License.
//

// File auto-generated by the `IconsProcessor` plugin within the CanvasKit package.

import SwiftUI

extension Image {\n\n
"""

// Scans `Icons.xcassets` for `.imageset` directories and generates `Image` constants.
try FileManager
  .default
  .subpathsOfDirectory(atPath: input)
  .forEach { item in
    guard item.hasSuffix("imageset") else { return }

    let contentsURL = URL(fileURLWithPath: input)
      .appendingPathComponent(item)
      .appendingPathComponent("Contents.json")

    let data = try Data(contentsOf: contentsURL)
    let contents = try JSONDecoder().decode(ContentsData.self, from: data)

    let hasIcon = contents.images.filter { $0.filename != .none }.isEmpty == false
    guard hasIcon else { return }

    let baseName = contentsURL
      .deletingLastPathComponent()
      .deletingPathExtension()
      .lastPathComponent

    // Formats the icon name to ensure proper casing.
    let formattedBaseName = baseName
      .split(separator: " ")
      .map { $0.prefix(1).uppercased() + $0.dropFirst() }
      .joined()

    generatedCode.append(
      "  static let ck\(formattedBaseName) = Image(\"\(baseName)\", bundle: .module)\n\n"
    )
  }

generatedCode.append("}\n") // Closes `extension Image`

// Writes the generated Swift code to the output file.
try generatedCode.write(to: URL(fileURLWithPath: output), atomically: true, encoding: .utf8)
